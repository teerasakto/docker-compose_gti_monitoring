{"version":3,"sources":["../../src/datasource-zabbix/dataProcessor.js"],"names":["limit","order","n","orderByFunc","timeseries","orderByCallback","aggregationFunctions","sortByIteratee","ts","values","_","map","datapoints","point","sortedTimeseries","sortBy","slice","sortSeries","direction","orderBy","target","toLowerCase","setAlias","alias","replaceAlias","regexp","newAlias","pattern","utils","isRegex","buildRegex","replace","setAliasByRegex","extractText","str","extractPattern","RegExp","extractedValue","exec","groupByWrapper","interval","groupFunc","groupByCallback","groupBy","aggregateByWrapper","aggregateFunc","flattenedPoints","flatten","sortedPoints","sortByTime","aggregateWrapper","percentil","partial","PERCENTIL","timeShift","range","shift","parseTimeShiftInterval","time","unShiftTimeSeries","unshift","dp","downsampleSeries","downsample","groupBy_perf","groupBy_exported","sumSeries","delta","rate","scale","factor","scale_perf","simpleMovingAverage","expMovingAverage","a","SUM","COUNT","AVERAGE","MIN","MAX","MEDIAN","metricFunctions","movingAverage","exponentialMovingAverage","aggregateBy","average","min","max","median","sum","count","top","bottom","avg"],"mappings":"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","file":"dataProcessor.js","sourcesContent":["import _ from 'lodash';\nimport * as utils from './utils';\nimport ts from './timeseries';\n\nlet downsampleSeries = ts.downsample;\nlet groupBy = ts.groupBy_perf;\nlet groupBy_exported = (interval, groupFunc, datapoints) => groupBy(datapoints, interval, groupFunc);\nlet sumSeries = ts.sumSeries;\nlet delta = ts.delta;\nlet rate = ts.rate;\nlet scale = (factor, datapoints) => ts.scale_perf(datapoints, factor);\nlet simpleMovingAverage = (n, datapoints) => ts.simpleMovingAverage(datapoints, n);\nlet expMovingAverage = (a, datapoints) => ts.expMovingAverage(datapoints, a);\n\nlet SUM = ts.SUM;\nlet COUNT = ts.COUNT;\nlet AVERAGE = ts.AVERAGE;\nlet MIN = ts.MIN;\nlet MAX = ts.MAX;\nlet MEDIAN = ts.MEDIAN;\nlet PERCENTIL = ts.PERCENTIL;\n\nfunction limit(order, n, orderByFunc, timeseries) {\n  let orderByCallback = aggregationFunctions[orderByFunc];\n  let sortByIteratee = (ts) => {\n    let values = _.map(ts.datapoints, (point) => {\n      return point[0];\n    });\n    return orderByCallback(values);\n  };\n  let sortedTimeseries = _.sortBy(timeseries, sortByIteratee);\n  if (order === 'bottom') {\n    return sortedTimeseries.slice(0, n);\n  } else {\n    return sortedTimeseries.slice(-n);\n  }\n}\n\nfunction sortSeries(direction, timeseries) {\n  return _.orderBy(timeseries, [function (ts) {\n    return ts.target.toLowerCase();\n  }], direction);\n}\n\nfunction setAlias(alias, timeseries) {\n  timeseries.target = alias;\n  return timeseries;\n}\n\nfunction replaceAlias(regexp, newAlias, timeseries) {\n  let pattern;\n  if (utils.isRegex(regexp)) {\n    pattern = utils.buildRegex(regexp);\n  } else {\n    pattern = regexp;\n  }\n\n  let alias = timeseries.target.replace(pattern, newAlias);\n  timeseries.target = alias;\n  return timeseries;\n}\n\nfunction setAliasByRegex(alias, timeseries) {\n  timeseries.target = extractText(timeseries.target, alias);\n  return timeseries;\n}\n\nfunction extractText(str, pattern) {\n  var extractPattern = new RegExp(pattern);\n  var extractedValue = extractPattern.exec(str);\n  extractedValue = extractedValue[0];\n  return extractedValue;\n}\n\nfunction groupByWrapper(interval, groupFunc, datapoints) {\n  var groupByCallback = aggregationFunctions[groupFunc];\n  return groupBy(datapoints, interval, groupByCallback);\n}\n\nfunction aggregateByWrapper(interval, aggregateFunc, datapoints) {\n  // Flatten all points in frame and then just use groupBy()\n  const flattenedPoints = _.flatten(datapoints, true);\n  // groupBy_perf works with sorted series only\n  const sortedPoints = ts.sortByTime(flattenedPoints);\n  let groupByCallback = aggregationFunctions[aggregateFunc];\n  return groupBy(sortedPoints, interval, groupByCallback);\n}\n\nfunction aggregateWrapper(groupByCallback, interval, datapoints) {\n  var flattenedPoints = _.flatten(datapoints, true);\n  return groupBy(flattenedPoints, interval, groupByCallback);\n}\n\nfunction percentil(interval, n, datapoints) {\n  var flattenedPoints = _.flatten(datapoints, true);\n  var groupByCallback = _.partial(PERCENTIL, n);\n  return groupBy(flattenedPoints, interval, groupByCallback);\n}\n\nfunction timeShift(interval, range) {\n  let shift = utils.parseTimeShiftInterval(interval) / 1000;\n  return _.map(range, time => {\n    return time - shift;\n  });\n}\n\nfunction unShiftTimeSeries(interval, datapoints) {\n  let unshift = utils.parseTimeShiftInterval(interval);\n  return _.map(datapoints, dp => {\n    return [\n      dp[0],\n      dp[1] + unshift\n    ];\n  });\n}\n\nlet metricFunctions = {\n  groupBy: groupByWrapper,\n  scale: scale,\n  delta: delta,\n  rate: rate,\n  movingAverage: simpleMovingAverage,\n  exponentialMovingAverage: expMovingAverage,\n  aggregateBy: aggregateByWrapper,\n  // Predefined aggs\n  percentil: percentil,\n  average: _.partial(aggregateWrapper, AVERAGE),\n  min: _.partial(aggregateWrapper, MIN),\n  max: _.partial(aggregateWrapper, MAX),\n  median: _.partial(aggregateWrapper, MEDIAN),\n  sum: _.partial(aggregateWrapper, SUM),\n  count: _.partial(aggregateWrapper, COUNT),\n  sumSeries: sumSeries,\n  top: _.partial(limit, 'top'),\n  bottom: _.partial(limit, 'bottom'),\n  sortSeries: sortSeries,\n  timeShift: timeShift,\n  setAlias: setAlias,\n  setAliasByRegex: setAliasByRegex,\n  replaceAlias: replaceAlias\n};\n\nlet aggregationFunctions = {\n  avg: AVERAGE,\n  min: MIN,\n  max: MAX,\n  median: MEDIAN,\n  sum: SUM,\n  count: COUNT\n};\n\nexport default {\n  downsampleSeries: downsampleSeries,\n  groupBy: groupBy_exported,\n  AVERAGE: AVERAGE,\n  MIN: MIN,\n  MAX: MAX,\n  MEDIAN: MEDIAN,\n  SUM: SUM,\n  COUNT: COUNT,\n  unShiftTimeSeries: unShiftTimeSeries,\n\n  get aggregationFunctions() {\n    return aggregationFunctions;\n  },\n\n  get metricFunctions() {\n    return metricFunctions;\n  }\n};\n"]}