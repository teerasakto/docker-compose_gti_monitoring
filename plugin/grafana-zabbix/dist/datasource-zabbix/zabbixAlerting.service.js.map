{"version":3,"sources":["../../src/datasource-zabbix/zabbixAlerting.service.js"],"names":["_","$","angular","ZabbixAlertingService","dashboardSrv","dash","meta","fullscreen","panelId","alertState","panelIndex","panelContainers","filter","elem","clientHeight","clientWidth","panelModels","getPanelModels","isFullScreen","findIndex","panel","id","alertClass","removeClass","addClass","panels","type","find","threshold","getPanelModel","containsThreshold","thresholds","value","thresholdOptions","colorMode","fill","line","lineColor","op","source","push","module","service"],"mappings":"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","file":"zabbixAlerting.service.js","sourcesContent":["import _ from 'lodash';\nimport $ from 'jquery';\nimport angular from 'angular';\n\nclass ZabbixAlertingService {\n\n  /** @ngInject */\n  constructor(dashboardSrv) {\n    this.dashboardSrv = dashboardSrv;\n  }\n\n  isFullScreen() {\n    return this.dashboardSrv.dash.meta.fullscreen;\n  }\n\n  setPanelAlertState(panelId, alertState) {\n    let panelIndex;\n\n    let panelContainers = _.filter($('.panel-container'), elem => {\n      return elem.clientHeight && elem.clientWidth;\n    });\n\n    let panelModels = this.getPanelModels();\n\n    if (this.isFullScreen()) {\n      panelIndex = 0;\n    } else {\n      panelIndex = _.findIndex(panelModels, panel => {\n        return panel.id === panelId;\n      });\n    }\n\n    if (panelIndex >= 0) {\n      let alertClass = \"panel-has-alert panel-alert-state--ok panel-alert-state--alerting\";\n      $(panelContainers[panelIndex]).removeClass(alertClass);\n\n      if (alertState) {\n        if (alertState === 'alerting') {\n          alertClass = \"panel-has-alert panel-alert-state--\" + alertState;\n          $(panelContainers[panelIndex]).addClass(alertClass);\n        }\n        if (alertState === 'ok') {\n          alertClass = \"panel-alert-state--\" + alertState;\n          $(panelContainers[panelIndex]).addClass(alertClass);\n          $(panelContainers[panelIndex]).removeClass(\"panel-has-alert\");\n        }\n      }\n    }\n  }\n\n  getPanelModels() {\n    return _.filter(this.dashboardSrv.dash.panels, panel => panel.type !== 'row');\n  }\n\n  getPanelModel(panelId) {\n    let panelModels = this.getPanelModels();\n\n    return _.find(panelModels, panel => {\n      return panel.id === panelId;\n    });\n  }\n\n  setPanelThreshold(panelId, threshold) {\n    let panel = this.getPanelModel(panelId);\n    let containsThreshold = _.find(panel.thresholds, {value: threshold});\n\n    if (panel && panel.type === \"graph\" && !containsThreshold) {\n      let thresholdOptions = {\n        colorMode : \"custom\",\n        fill : false,\n        line : true,\n        lineColor: \"rgb(255, 0, 0)\",\n        op: \"gt\",\n        value: threshold,\n        source: \"zabbix\"\n      };\n\n      panel.thresholds.push(thresholdOptions);\n    }\n  }\n\n  removeZabbixThreshold(panelId) {\n    let panel = this.getPanelModel(panelId);\n\n    if (panel && panel.type === \"graph\") {\n      panel.thresholds = _.filter(panel.thresholds, threshold => {\n        return threshold.source !== \"zabbix\";\n      });\n    }\n  }\n\n}\n\nangular\n  .module('grafana.services')\n  .service('zabbixAlertingSrv', ZabbixAlertingService);\n"]}